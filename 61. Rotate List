# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def rotateRight(self, head, k):
        """
        :type head: ListNode
        :type k: int
        :rtype: ListNode
        """
        end = head
        root = ListNode(0)
        dummy = head
        if not head or not head.next or k==0:
            return head
        else:
            length = 1
            idx = 1
        #find the length and end node        
        while end:
            if end.next and end.next.next:
                end = end.next.next
                length += 2
            else:
                break
        if end.next:
            length += 1
            end = end.next
            
        rotate = k%length
        if rotate == 0:
            return head
        for i in range(length-rotate-1):
            dummy = dummy.next
        root.next = dummy.next
        dummy.next = None
        end.next = head

        #print length,idx
        return root.next
            
  
            
            
             